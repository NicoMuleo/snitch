starting test with snitch v*
==========================================
starting: test pass at *testing_reporters.cpp:*
passed: running test case "test pass"
          at *testing_reporters.cpp:*
          no exception caught
finished: test pass (*)
starting: test fail at *testing_reporters.cpp:*
failed: running test case "test fail"
          at *testing_reporters.cpp:*
          CHECK(1 == 2), got: 1 != 2
passed: running test case "test fail"
          at *testing_reporters.cpp:*
          no exception caught
finished: test fail (*)
starting: test mayfail good pass at *testing_reporters.cpp:*
passed: running test case "test mayfail good pass"
          at *testing_reporters.cpp:*
          no exception caught
finished: test mayfail good pass (*)
starting: test mayfail bad pass at *testing_reporters.cpp:*
allowed failure: running test case "test mayfail bad pass"
          at *testing_reporters.cpp:*
          CHECK(1 == 2), got: 1 != 2
passed: running test case "test mayfail bad pass"
          at *testing_reporters.cpp:*
          no exception caught
finished: test mayfail bad pass (*)
starting: test shouldfail good fail at *testing_reporters.cpp:*
passed: running test case "test shouldfail good fail"
          at *testing_reporters.cpp:*
          no exception caught
failed: running test case "test shouldfail good fail"
          at *testing_reporters.cpp:*
          expected test to fail
finished: test shouldfail good fail (*)
starting: test shouldfail bad pass at *testing_reporters.cpp:*
expected failure: running test case "test shouldfail bad pass"
          at *testing_reporters.cpp:*
          CHECK(1 == 2), got: 1 != 2
passed: running test case "test shouldfail bad pass"
          at *testing_reporters.cpp:*
          no exception caught
passed: running test case "test shouldfail bad pass"
          at *testing_reporters.cpp:*
          expected test to fail
finished: test shouldfail bad pass (*)
starting: test no tags pass at *testing_reporters.cpp:*
passed: running test case "test no tags pass"
          at *testing_reporters.cpp:*
          no exception caught
finished: test no tags pass (*)
starting: test no tags fail at *testing_reporters.cpp:*
failed: running test case "test no tags fail"
          at *testing_reporters.cpp:*
          CHECK(1 == 2), got: 1 != 2
passed: running test case "test no tags fail"
          at *testing_reporters.cpp:*
          no exception caught
finished: test no tags fail (*)
starting: typed test no tags pass <int> at *testing_reporters.cpp:*
passed: running test case "typed test no tags pass"
          at *testing_reporters.cpp:*
          for type int
          no exception caught
finished: typed test no tags pass <int> (*)
starting: typed test no tags pass <float> at *testing_reporters.cpp:*
passed: running test case "typed test no tags pass"
          at *testing_reporters.cpp:*
          for type float
          no exception caught
finished: typed test no tags pass <float> (*)
starting: typed test no tags fail <int> at *testing_reporters.cpp:*
failed: running test case "typed test no tags fail"
          at *testing_reporters.cpp:*
          for type int
          CHECK(1 == 2), got: 1 != 2
passed: running test case "typed test no tags fail"
          at *testing_reporters.cpp:*
          for type int
          no exception caught
finished: typed test no tags fail <int> (*)
starting: typed test no tags fail <float> at *testing_reporters.cpp:*
failed: running test case "typed test no tags fail"
          at *testing_reporters.cpp:*
          for type float
          CHECK(1 == 2), got: 1 != 2
passed: running test case "typed test no tags fail"
          at *testing_reporters.cpp:*
          for type float
          no exception caught
finished: typed test no tags fail <float> (*)
starting: typed test with tags pass <int> at *testing_reporters.cpp:*
passed: running test case "typed test with tags pass"
          at *testing_reporters.cpp:*
          for type int
          no exception caught
finished: typed test with tags pass <int> (*)
starting: typed test with tags pass <float> at *testing_reporters.cpp:*
passed: running test case "typed test with tags pass"
          at *testing_reporters.cpp:*
          for type float
          no exception caught
finished: typed test with tags pass <float> (*)
starting: typed test with tags fail <int> at *testing_reporters.cpp:*
failed: running test case "typed test with tags fail"
          at *testing_reporters.cpp:*
          for type int
          CHECK(1 == 2), got: 1 != 2
passed: running test case "typed test with tags fail"
          at *testing_reporters.cpp:*
          for type int
          no exception caught
finished: typed test with tags fail <int> (*)
starting: typed test with tags fail <float> at *testing_reporters.cpp:*
failed: running test case "typed test with tags fail"
          at *testing_reporters.cpp:*
          for type float
          CHECK(1 == 2), got: 1 != 2
passed: running test case "typed test with tags fail"
          at *testing_reporters.cpp:*
          for type float
          no exception caught
finished: typed test with tags fail <float> (*)
starting: test fixture pass at *testing_reporters.cpp:*
passed: running test case "test fixture pass"
          at *testing_reporters.cpp:*
          no exception caught
finished: test fixture pass (*)
starting: test fixture fail at *testing_reporters.cpp:*
failed: running test case "test fixture fail"
          at *testing_reporters.cpp:*
          CHECK(1 == 2), got: 1 != 2
passed: running test case "test fixture fail"
          at *testing_reporters.cpp:*
          no exception caught
finished: test fixture fail (*)
starting: test SUCCEED pass at *testing_reporters.cpp:*
passed: running test case "test SUCCEED pass"
          at *testing_reporters.cpp:*
          something good
passed: running test case "test SUCCEED pass"
          at *testing_reporters.cpp:*
          no exception caught
finished: test SUCCEED pass (*)
starting: test FAIL fail at *testing_reporters.cpp:*
failed: running test case "test FAIL fail"
          at *testing_reporters.cpp:*
          something bad
passed: running test case "test FAIL fail"
          at *testing_reporters.cpp:*
          no exception caught
finished: test FAIL fail (*)
starting: test expression pass at *testing_reporters.cpp:*
passed: running test case "test expression pass"
          at *testing_reporters.cpp:*
          CHECK(1 == 1)
passed: running test case "test expression pass"
          at *testing_reporters.cpp:*
          no exception caught
finished: test expression pass (*)
starting: test expression fail at *testing_reporters.cpp:*
failed: running test case "test expression fail"
          at *testing_reporters.cpp:*
          CHECK(1 == 2), got: 1 != 2
passed: running test case "test expression fail"
          at *testing_reporters.cpp:*
          no exception caught
finished: test expression fail (*)
starting: test long expression pass at *testing_reporters.cpp:*
passed: running test case "test long expression pass"
          at *testing_reporters.cpp:*
          CHECK(some_very_long_name_that_forces_lines_to_wrap == some_very_long_name_that_forces_lines_to_wrap)
passed: running test case "test long expression pass"
          at *testing_reporters.cpp:*
          no exception caught
finished: test long expression pass (*)
starting: test long expression fail at *testing_reporters.cpp:*
failed: running test case "test long expression fail"
          at *testing_reporters.cpp:*
          CHECK(some_very_long_name_that_forces_lines_to_wrap != some_very_long_name_that_forces_lines_to_wrap)
          got: 1 == 1
passed: running test case "test long expression fail"
          at *testing_reporters.cpp:*
          no exception caught
finished: test long expression fail (*)
starting: test too long expression pass at *testing_reporters.cpp:*
passed: running test case "test too long expression pass"
          at *testing_reporters.cpp:*
          CHECK(super_long_string == super_long_string)
passed: running test case "test too long expression pass"
          at *testing_reporters.cpp:*
          no exception caught
finished: test too long expression pass (*)
starting: test too long expression fail at *testing_reporters.cpp:*
failed: running test case "test too long expression fail"
          at *testing_reporters.cpp:*
          CHECK(super_long_string != super_long_string)
passed: running test case "test too long expression fail"
          at *testing_reporters.cpp:*
          no exception caught
finished: test too long expression fail (*)
starting: test too long message pass at *testing_reporters.cpp:*
failed: running test case "test too long message pass"
          at *testing_reporters.cpp:*
          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...
finished: test too long message pass (*)
starting: test too long message fail at *testing_reporters.cpp:*
failed: running test case "test too long message fail"
          at *testing_reporters.cpp:*
          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...
finished: test too long message fail (*)
starting: test NOTHROW pass at *testing_reporters.cpp:*
passed: running test case "test NOTHROW pass"
          at *testing_reporters.cpp:*
          throw_something(false) did not throw
passed: running test case "test NOTHROW pass"
          at *testing_reporters.cpp:*
          no exception caught
finished: test NOTHROW pass (*)
starting: test NOTHROW fail at *testing_reporters.cpp:*
failed: running test case "test NOTHROW fail"
          at *testing_reporters.cpp:*
          expected throw_something(true) not to throw but it threw a std::exception; message: I threw
passed: running test case "test NOTHROW fail"
          at *testing_reporters.cpp:*
          no exception caught
finished: test NOTHROW fail (*)
starting: test THROW pass at *testing_reporters.cpp:*
passed: running test case "test THROW pass"
          at *testing_reporters.cpp:*
          caught std::runtime_error matched expected content: found 'I threw' in 'I threw'
passed: running test case "test THROW pass"
          at *testing_reporters.cpp:*
          no exception caught
finished: test THROW pass (*)
starting: test THROW fail at *testing_reporters.cpp:*
failed: running test case "test THROW fail"
          at *testing_reporters.cpp:*
          std::runtime_error expected but no exception thrown
failed: running test case "test THROW fail"
          at *testing_reporters.cpp:*
          std::system_error expected but other std::exception thrown; message: I threw
failed: running test case "test THROW fail"
          at *testing_reporters.cpp:*
          could not match caught std::runtime_error with expected content: could not find 'I throws' in 'I threw'
passed: running test case "test THROW fail"
          at *testing_reporters.cpp:*
          no exception caught
finished: test THROW fail (*)
starting: test unexpected throw fail at *testing_reporters.cpp:*
failed: running test case "test unexpected throw fail"
          somewhere inside test case at *testing_reporters.cpp:*
          unexpected std::exception caught; message: unexpected error
finished: test unexpected throw fail (*)
starting: test unexpected throw in section fail at *testing_reporters.cpp:*
entering section: section 1 at *testing_reporters.cpp:*
entering section: section 2 at *testing_reporters.cpp:*
failed: running test case "test unexpected throw in section fail"
          in section "section 1"
          in section "section 2"
          somewhere inside section at *testing_reporters.cpp:*
          unexpected std::exception caught; message: unexpected error
leaving section: section 2
leaving section: section 1
finished: test unexpected throw in section fail (*)
starting: test unexpected throw in check fail at *testing_reporters.cpp:*
failed: running test case "test unexpected throw in check fail"
          somewhere inside check at *testing_reporters.cpp:*
          unexpected std::exception caught; message: unexpected error
finished: test unexpected throw in check fail (*)
starting: test unexpected throw in check & section fail at *testing_reporters.cpp:*
entering section: section 1 at *testing_reporters.cpp:*
failed: running test case "test unexpected throw in check & section fail"
          in section "section 1"
          somewhere inside check at *testing_reporters.cpp:*
          unexpected std::exception caught; message: unexpected error
leaving section: section 1
finished: test unexpected throw in check & section fail (*)
starting: test SKIP at *testing_reporters.cpp:*
skipped: running test case "test SKIP"
          at *testing_reporters.cpp:*
          not interesting
finished: test SKIP (*)
starting: test INFO at *testing_reporters.cpp:*
failed: running test case "test INFO"
          at *testing_reporters.cpp:*
          with info
          failure
passed: running test case "test INFO"
          at *testing_reporters.cpp:*
          no exception caught
finished: test INFO (*)
starting: test multiple INFO at *testing_reporters.cpp:*
failed: running test case "test multiple INFO"
          at *testing_reporters.cpp:*
          failure 1
failed: running test case "test multiple INFO"
          at *testing_reporters.cpp:*
          with info 1
          failure 2
failed: running test case "test multiple INFO"
          at *testing_reporters.cpp:*
          with info 1
          with info 2
          failure 3
failed: running test case "test multiple INFO"
          at *testing_reporters.cpp:*
          with info 1
          failure 4
passed: running test case "test multiple INFO"
          at *testing_reporters.cpp:*
          no exception caught
finished: test multiple INFO (*)
starting: test SECTION at *testing_reporters.cpp:*
entering section: section at *testing_reporters.cpp:*
failed: running test case "test SECTION"
          in section "section"
          at *testing_reporters.cpp:*
          failure
leaving section: section
passed: running test case "test SECTION"
          at *testing_reporters.cpp:*
          no exception caught
finished: test SECTION (*)
starting: test multiple SECTION at *testing_reporters.cpp:*
entering section: section 1 at *testing_reporters.cpp:*
failed: running test case "test multiple SECTION"
          in section "section 1"
          at *testing_reporters.cpp:*
          failure 1
leaving section: section 1
failed: running test case "test multiple SECTION"
          at *testing_reporters.cpp:*
          failure 7
entering section: section 2 at *testing_reporters.cpp:*
failed: running test case "test multiple SECTION"
          in section "section 2"
          at *testing_reporters.cpp:*
          failure 2
entering section: section 2.1 at *testing_reporters.cpp:*
failed: running test case "test multiple SECTION"
          in section "section 2"
          in section "section 2.1"
          at *testing_reporters.cpp:*
          failure 3
leaving section: section 2.1
failed: running test case "test multiple SECTION"
          at *testing_reporters.cpp:*
          failure 7
failed: running test case "test multiple SECTION"
          in section "section 2"
          at *testing_reporters.cpp:*
          failure 2
entering section: section 2.2 at *testing_reporters.cpp:*
failed: running test case "test multiple SECTION"
          in section "section 2"
          in section "section 2.2"
          at *testing_reporters.cpp:*
          failure 4
entering section: section 2.2.1 at *testing_reporters.cpp:*
failed: running test case "test multiple SECTION"
          in section "section 2"
          in section "section 2.2"
          in section "section 2.2.1"
          at *testing_reporters.cpp:*
          failure 5
leaving section: section 2.2.1
failed: running test case "test multiple SECTION"
          in section "section 2"
          in section "section 2.2"
          at *testing_reporters.cpp:*
          failure 6
leaving section: section 2.2
leaving section: section 2
failed: running test case "test multiple SECTION"
          at *testing_reporters.cpp:*
          failure 7
passed: running test case "test multiple SECTION"
          at *testing_reporters.cpp:*
          no exception caught
finished: test multiple SECTION (*)
starting: test SECTION & INFO at *testing_reporters.cpp:*
entering section: section 1 at *testing_reporters.cpp:*
failed: running test case "test SECTION & INFO"
          in section "section 1"
          at *testing_reporters.cpp:*
          with info 1
          with info 2
          failure 1
leaving section: section 1
failed: running test case "test SECTION & INFO"
          at *testing_reporters.cpp:*
          with info 1
          failure 3
entering section: section 2 at *testing_reporters.cpp:*
failed: running test case "test SECTION & INFO"
          in section "section 2"
          at *testing_reporters.cpp:*
          with info 1
          with info 3
          failure 2
leaving section: section 2
failed: running test case "test SECTION & INFO"
          at *testing_reporters.cpp:*
          with info 1
          failure 3
passed: running test case "test SECTION & INFO"
          at *testing_reporters.cpp:*
          no exception caught
finished: test SECTION & INFO (*)
starting: test SECTION & CAPTURE at *testing_reporters.cpp:*
entering section: section 1 at *testing_reporters.cpp:*
failed: running test case "test SECTION & CAPTURE"
          in section "section 1"
          at *testing_reporters.cpp:*
          with i := 1
          with j := 2
          failure 1
leaving section: section 1
failed: running test case "test SECTION & CAPTURE"
          at *testing_reporters.cpp:*
          with i := 1
          failure 3
entering section: section 2 at *testing_reporters.cpp:*
failed: running test case "test SECTION & CAPTURE"
          in section "section 2"
          at *testing_reporters.cpp:*
          with i := 1
          with j := 3
          failure 2
leaving section: section 2
failed: running test case "test SECTION & CAPTURE"
          at *testing_reporters.cpp:*
          with i := 1
          failure 3
passed: running test case "test SECTION & CAPTURE"
          at *testing_reporters.cpp:*
          no exception caught
finished: test SECTION & CAPTURE (*)
starting: test SKIP in SECTION at *testing_reporters.cpp:*
entering section: section 1 at *testing_reporters.cpp:*
entering section: section 2 at *testing_reporters.cpp:*
skipped: running test case "test SKIP in SECTION"
          in section "section 1"
          in section "section 2"
          at *testing_reporters.cpp:*
          stopping here
leaving section: section 2
leaving section: section 1
finished: test SKIP in SECTION (*)
==========================================
error: some tests failed (26 out of 44 test cases, 91 assertions, 2 test cases skipped, * seconds)
